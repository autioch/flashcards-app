{"version":3,"sources":["actions.js","initialState.js","app/game/badList/index.js","app/game/goodList/index.js","app/game/guess/keyboard.js","app/game/guess/input.js","app/game/guess/index.js","app/game/menu/index.js","app/game/status/index.js","app/game/index.js","app/library/index.js","index.js","app/index.js"],"names":["actions","prepare","_ref","store","state","window","fetch","concat","urlFolderPath","then","resp","text","contents","words","trim","split","map","line","index","_line$trim$split","_line$trim$split2","Object","slicedToArray","income","outcome","_line$trim$split2$","id","origin","isIgnored","allLetters","reduce","arr","_ref2","letters","uniq","sort","a","b","localeCompare","setData","restart","_ref3","data","allWords","start","_ref4","available","slice","Math","random","good","bad","isFinished","_ref5","pick","_ref6","currentWord","finish","guess","_ref7","duration","round","setGood","setBad","length","_ref8","_ref9","initialState","BadItem","word","react_default","createElement","className","BadList","count","key","GoodItem","GoodList","Letter","letter","useLetter","es_button","onClick","GameGuessKeyboard","GuessInput","value","update","approve","input","placeholder","onChange","onPressEnter","autoCapitalize","autoComplete","autoCorrect","spellCheck","size","Guess","props","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","Date","bind","assertThisInitialized","updateGuess","nextProps","setState","getTime","ev","target","type","Component","GameMenu","NavLink","exact","to","PERCENT","GameStatus","setLightning","lightning","stop","canvas","refs","rect","getBoundingClientRect","canvasLightning","WIDTH","width","HEIGHT","height","COLOR_BG","LINE_JOIN","LINE_WIDTH","LINE_BLUR","MIN_X","MAX_X","left","goodCount","badCount","total","floor","calculateStatus","showLightning","style","ref","Game","status_GameStatus","guess_Guess","Library","Link","icon","el","document","querySelector","createApp","BrowserRouter","basename","Route","path","render"],"mappings":"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","file":"static/js/main.53d32a44.chunk.js","sourcesContent":["import { uniq } from 'lodash';\r\n\r\nconst HALF = 0.5;\r\nconst MILISECOND = 1000;\r\n\r\nexport default {\r\n\r\n  prepare({ store, state }) {\r\n    window\r\n      .fetch(`${state.urlFolderPath}/library.csv`)\r\n      .then((resp) => resp.text())\r\n      .then((contents) => {\r\n        const lines = contents.trim().split('\\n');\r\n        const words = lines.map((line, index) => {\r\n          const [income, outcome, isIgnored = false] = line.trim().split(';');\r\n\r\n          return {\r\n            id: index,\r\n            origin: income,\r\n            outcome,\r\n            isIgnored: !!isIgnored\r\n          };\r\n        });\r\n\r\n        const allLetters = words.reduce((arr, { outcome }) => arr.concat(outcome.split('')), []);\r\n        const letters = uniq(allLetters).sort((a, b) => a.localeCompare(b));\r\n\r\n        store\r\n          .setData({\r\n            words,\r\n            letters\r\n          })\r\n          .restart();\r\n      });\r\n  },\r\n\r\n  setData({ data }) {\r\n    const { words, letters } = data;\r\n\r\n    return {\r\n      allWords: words,\r\n      letters\r\n    };\r\n  },\r\n\r\n  start({ state }) {\r\n    return {\r\n      available: state.allWords.slice().sort(() => Math.random() - HALF),\r\n      good: [],\r\n      bad: [],\r\n      isFinished: false\r\n    };\r\n  },\r\n\r\n  restart({ store }) {\r\n    return store.start().pick();\r\n  },\r\n\r\n  pick({ state }) {\r\n    return {\r\n      currentWord: state.available[0],\r\n      available: state.available.slice(1)\r\n    };\r\n  },\r\n\r\n  finish() {\r\n    return {\r\n      isFinished: true\r\n    };\r\n  },\r\n\r\n  guess({ state, data, store }) {\r\n    const { guess, duration } = data;\r\n    const { currentWord } = state;\r\n\r\n    currentWord.duration = Math.round(duration / MILISECOND);\r\n    currentWord.guess = guess;\r\n\r\n    if (currentWord.outcome === guess) {\r\n    // if (Math.random() > HALF) {\r\n      store.setGood();\r\n    } else {\r\n      store.setBad();\r\n    }\r\n\r\n    if (!state.available.length) {\r\n      store.finish();\r\n    }\r\n\r\n    store.pick();\r\n  },\r\n\r\n  setGood({ state }) {\r\n    return {\r\n      good: [state.currentWord].concat(state.good),\r\n      currentWord: null\r\n    };\r\n  },\r\n\r\n  setBad({ state }) {\r\n    return {\r\n      bad: [state.currentWord].concat(state.bad),\r\n      currentWord: null\r\n    };\r\n  }\r\n};\r\n","const IS_DEVELOPMENT = true;\r\n\r\nexport default {\r\n  available: [],\r\n  good: [],\r\n  bad: [],\r\n  currentWord: null,\r\n  isFinished: false,\r\n  letters: [],\r\n  urlFolderPath: IS_DEVELOPMENT ? '' : '/flashcards-app'\r\n};\r\n","import React from 'react';\r\nimport './styles.scss';\r\n\r\nfunction BadItem({ word }) {\r\n  return (\r\n    <div className=\"bad-list-item\">\r\n      <span className=\"origin\">{word.origin}</span>\r\n      <span className=\"outcome\">{word.outcome}</span>\r\n      { word.guess ? <span className=\"wrong\">{word.guess}</span> : <span className=\"empty\">no answer</span> }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function BadList({ words }) {\r\n  const count = words.length;\r\n\r\n  return (\r\n    <div className=\"bad-list\">\r\n      <div className=\"game__header\">{count} bad</div>\r\n      <div className=\"word-list\">\r\n        {words.map((word) => <BadItem key={word.id} word={word} />)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './styles.scss';\r\n\r\nfunction GoodItem({ word }) {\r\n  return (\r\n    <div className=\"good-list-item\">\r\n      <span className=\"origin\">{word.origin}</span>\r\n      <span className=\"outcome\">{word.outcome}</span>\r\n      <span className=\"duration\">{word.duration}s</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function GoodList({ words }) {\r\n  const count = words.length;\r\n\r\n  return (\r\n    <div className=\"good-list\">\r\n      <div className=\"game__header\">{count} good</div>\r\n      <div className=\"word-list\">\r\n        {words.map((word) => <GoodItem key={word.id} word={word} />)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\n\r\nfunction Letter({ letter, useLetter }) {\r\n  return (\r\n    <Button onClick={() => useLetter(letter)} >{letter}</Button>\r\n  );\r\n}\r\n\r\nexport default function GameGuessKeyboard({ letters, useLetter }) {\r\n  return (\r\n    <div className=\"keyboard\">\r\n      <div className=\"keyboard__header\">Possible characters:</div>\r\n      <div className=\"keyboard__letters\">\r\n        {letters.map((letter) => <Letter key={letter} letter={letter} useLetter={useLetter} />)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Input } from 'antd';\r\n\r\nexport default function GuessInput({ value, update, approve }) {\r\n  return (\r\n    <Input\r\n      value={value}\r\n      placeholder=\"Place Your guess...\"\r\n      onChange={update}\r\n      onPressEnter={approve}\r\n      autoCapitalize=\"off\"\r\n      autoComplete=\"off\"\r\n      autoCorrect=\"off\"\r\n      spellCheck=\"false\"\r\n      size=\"large\"\r\n    />\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Button } from 'antd';\r\nimport Keyboard from './keyboard';\r\nimport Input from './input';\r\nimport './styles.scss';\r\n\r\nexport default class Guess extends Component {\r\n  constructor(props, ...args) {\r\n    super(props, ...args);\r\n    this.state = {\r\n      guess: '',\r\n      start: new Date()\r\n    };\r\n    this.guess = this.guess.bind(this);\r\n    this.useLetter = this.useLetter.bind(this);\r\n    this.updateGuess = this.updateGuess.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props.currentWord !== nextProps.currentWord) {\r\n      this.setState({\r\n        guess: '',\r\n        start: new Date().getTime()\r\n      });\r\n    }\r\n  }\r\n\r\n  updateGuess(ev) {\r\n    this.setState({\r\n      guess: ev.target.value\r\n    });\r\n  }\r\n\r\n  guess() {\r\n    const duration = new Date().getTime() - this.state.start;\r\n\r\n    this.props.guess({\r\n      guess: this.state.guess,\r\n      duration\r\n    });\r\n  }\r\n\r\n  useLetter(letter) {\r\n    this.setState({\r\n      guess: this.state.guess + letter\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game-guess\">\r\n        <div className=\"game__header\">Word to translate</div>\r\n        <div className=\"current-word\">{this.props.currentWord.origin}</div>\r\n        <Input value={this.state.guess} update={this.updateGuess} approve={this.guess} />\r\n        <Keyboard letters={this.props.letters} useLetter={this.useLetter} />\r\n        <Button size=\"large\" onClick={this.guess} type=\"primary\">Check</Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\nimport './styles.scss';\r\n\r\nexport default function GameMenu({ state, store }) {\r\n  const { available } = state;\r\n  const { restart } = store;\r\n\r\n  return (\r\n    <div className=\"game-menu\">\r\n      <div className=\"game__header\">{available.length} word{available.length > 1 ? 's' : ''} left</div>\r\n      <div className=\"game-menu-options\">\r\n        <Button onClick={restart} type=\"danger\">Restart</Button>\r\n        <NavLink exact to=\"/library\">\r\n          <Button onClick={restart}>Library</Button>\r\n        </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport canvasLightning from 'canvas-lightning';\r\nimport './styles.scss';\r\n\r\nconst PERCENT = 100;\r\n\r\nfunction calculateStatus(good, bad) {\r\n  const goodCount = good.length;\r\n  const badCount = bad.length;\r\n\r\n  if (!badCount) {\r\n    return 0;\r\n  }\r\n\r\n  if (!goodCount) {\r\n    return PERCENT;\r\n  }\r\n\r\n  const total = goodCount + badCount;\r\n\r\n  return Math.floor((badCount / total) * PERCENT);\r\n}\r\n\r\nexport default class GameStatus extends Component {\r\n  componentDidMount() {\r\n    this.setLightning();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.lightning.stop();\r\n  }\r\n\r\n  setLightning() {\r\n    const { canvas } = this.refs;\r\n    const rect = canvas.getBoundingClientRect();\r\n\r\n    this.lightning = canvasLightning(canvas, {\r\n      WIDTH: rect.width,\r\n      HEIGHT: rect.height,\r\n      COLOR_BG: 'transparent',\r\n\r\n      // COLOR_LIGHT: '#fff',\r\n      // COLOR_BLUR: '#fff',\r\n      LINE_JOIN: 'round',\r\n      LINE_WIDTH: 5,\r\n      LINE_BLUR: 2,\r\n      MIN_X: 1,\r\n      MAX_X: 3\r\n    });\r\n    this.lightning.start();\r\n  }\r\n  render() {\r\n    const left = calculateStatus(this.props.good, this.props.bad);\r\n    const showLightning = left > 0 && left < 100;\r\n\r\n    return (\r\n      <div className=\"game-status\" style={{\r\n        left: `${left}%`\r\n      }}>\r\n        {<canvas ref=\"canvas\" className={`game-status__canvas${showLightning ? '' : ' is-invisible'}`}></canvas>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport BadList from './badList';\r\nimport GoodList from './goodList';\r\nimport Guess from './guess';\r\nimport Menu from './menu';\r\nimport Status from './status';\r\nimport './styles.scss';\r\n\r\nexport default function Game({ state, store }) {\r\n  const { good, bad, letters, isFinished, currentWord } = state;\r\n  const { guess } = store;\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <Status good={good} bad={bad}/>\r\n      <BadList words={bad} />\r\n      <div className=\"game-content\">\r\n        {!isFinished && <Guess letters={letters} currentWord={currentWord} guess={guess} />}\r\n        {isFinished && <div className=\"\">Finished!</div>}\r\n        <Menu store={store} state={state} />\r\n      </div>\r\n      <GoodList words={good} />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Icon } from 'antd';\r\nimport './styles.scss';\r\n\r\nexport default function Library({ state }) {\r\n  const { allWords } = state;\r\n\r\n  return (\r\n    <div className=\"app-page\">\r\n      <div className=\"library__header\">\r\n        <div className=\"library__label\">Words library({allWords.length})</div>\r\n        <Link className=\"library__close\" to=\"/\">\r\n          <Icon type=\"close-circle\" />\r\n        </Link>\r\n      </div>\r\n      <div className=\"library__list\">\r\n        {allWords.map((word, index) =>\r\n          <div key={index} className=\"library__row\">\r\n            <div className=\"library__cell\">{word.origin}</div>\r\n            <div className=\"library__cell\">{word.outcome}</div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import 'antd/dist/antd.css';\r\nimport { createApp } from 'pipe-and-gauge';\r\nimport actions from './actions';\r\nimport initialState from './initialState';\r\nimport ReactAppView from './app';\r\n\r\nconst el = document.querySelector('#root');\r\n\r\nconst store = createApp(actions, initialState, ReactAppView, el);\r\n\r\nstore.prepare();\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Game from './game';\r\nimport Library from './library';\r\nimport './styles.scss';\r\n\r\nexport default function App({ state, store }) {\r\n  return (\r\n    <Router\r\n\r\n      basename={state.urlFolderPath}\r\n    >\r\n      <div className=\"app-container\">\r\n        <Route exact path=\"/\" render={() => <Game state={state} store={store} /> } />\r\n        <Route exact path=\"/library\" render={() => <Library state={state} store={store} /> } />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n"],"sourceRoot":""}